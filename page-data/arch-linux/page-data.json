{"componentChunkName":"component---src-templates-blog-post-js","path":"/arch-linux/","result":{"data":{"site":{"siteMetadata":{"title":"拨鼠哥哥的部落格"}},"markdownRemark":{"id":"3fd945c7-7b64-5dbd-bec1-264724f5da7f","excerpt":"装了很多回，跟了很多遍各种教程和官方 wiki ，也来自己写一个简单的笔记吧。 安装之前的准备略去不写，就从的 iso 启动之后开始吧。其实也只是安装过程看上去高级一点，滚动更新的理念和大部分所谓主流发行版有点区别，用惯了 TUI 操作的人对于无 GUI 操作应当还是比较适应的，更何况提供了好几个 terminal…","html":"<p>装了很多回<code class=\"language-text\">archlinux</code>，跟了很多遍各种教程和官方 wiki ，也来自己写一个简单的笔记吧。</p>\n<p>安装之前的准备略去不写，就从<code class=\"language-text\">archlinux</code>的 iso 启动之后开始吧。其实<code class=\"language-text\">archlinux</code>也只是安装过程<strong>看上去</strong>高级一点，滚动更新的理念和大部分所谓主流发行版有点区别，用惯了 TUI 操作的人对于无 GUI 操作应当还是比较适应的，更何况提供了好几个 terminal 可以多线程操作，避免在等待的时候没事干（不是），甚至看到有老哥速通<code class=\"language-text\">archlinux</code>安装（这居然也有速通？）</p>\n<p>至于跟<code class=\"language-text\">archlinux</code>这个话题有关的争议，反正不在这个笔记的叙述范围之内，快速进入正题吧。</p>\n<p>进入<code class=\"language-text\">archlinux</code>安装环境之后，我们选择 <code class=\"language-text\">Arch Linux install medium (x86_64, UEFI)</code> 进入<code class=\"language-text\">archlinux</code>的安装环境，这是一个比较小的 live 系统，其 bash 已经可以给我们完成很多任务。</p>\n<p>archlinux 镜像中现在启用了 <code class=\"language-text\">reflector</code> 服务，会自己更新镜像源，然而在存在 GFW 的特殊网络环境中，这个服务并不适合被启用，我们还是老老实实地禁用它吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl stop reflector.service</code></pre></div>\n<p>查看服务状态，按<code class=\"language-text\">q</code>退出</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl status reflector.service</code></pre></div>\n<p>确认 <code class=\"language-text\">UEFI</code> 模式（保险起见）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /sys/firmware/efi/efivars</code></pre></div>\n<p>若有输出即是 <code class=\"language-text\">UEFI</code></p>\n<p>如果使用无线网络（有线跳过即可）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">iwctl <span class=\"token comment\"># 进入交互式命令行</span>\r\ndevice list <span class=\"token comment\"># 列出无线网卡设备名，比如无线网卡看到叫 wlan0</span>\r\nstation wlan0 scan <span class=\"token comment\"># 扫描网络</span>\r\nstation wlan0 get-networks <span class=\"token comment\"># 列出所有 wifi 网络</span>\r\nstation wlan0 connect wifi-name <span class=\"token comment\"># 进行连接，注意这里无法输入中文。回车后输入密码即可</span>\r\n<span class=\"token builtin class-name\">exit</span> <span class=\"token comment\"># 连接成功后退出</span></code></pre></div>\n<p>随便 <code class=\"language-text\">ping</code> 一个网站，应该能看到网络的连接情况。按 <code class=\"language-text\">Ctrl+C</code> 退出。</p>\n<p>同步时钟：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">timedatectl set-ntp <span class=\"token boolean\">true</span>\r\ntimedatectl status</code></pre></div>\n<p>更新国内镜像源：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/pacman.d/mirrorlist</code></pre></div>\n<p>在最上面加入以下镜像源的任意一条</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Server <span class=\"token operator\">=</span> https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class=\"token variable\">$repo</span>/os/<span class=\"token variable\">$arch</span> <span class=\"token comment\"># 清华大学开源软件镜像站</span>\r\nServer <span class=\"token operator\">=</span> https://repo.huaweicloud.com/archlinux/<span class=\"token variable\">$repo</span>/os/<span class=\"token variable\">$arch</span> <span class=\"token comment\"># 华为开源镜像站</span>\r\nServer <span class=\"token operator\">=</span> http://mirror.lzu.edu.cn/archlinux/<span class=\"token variable\">$repo</span>/os/<span class=\"token variable\">$arch</span> <span class=\"token comment\"># 兰州大学开源镜像站</span>\r\nServer <span class=\"token operator\">=</span> https://mirrors.ustc.edu.cn/archlinux/<span class=\"token variable\">$repo</span>/os/<span class=\"token variable\">$arch</span> <span class=\"token comment\"># 中国科学技术大学开源镜像站</span></code></pre></div>\n<p><del>你问我为什么把科大放最下面？</del><strong>我就爱用 THU 源</strong></p>\n<p>现在我们进入磁盘分区阶段。</p>\n<p>使用 <code class=\"language-text\">lsblk</code> 查看当前磁盘的情况，找到要用的磁盘和分区</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">lsblk</code></pre></div>\n<p>使用 <code class=\"language-text\">cfdisk</code> 对需要使用的磁盘分区：注意，SATA 磁盘名称为 sdx (x=a~z)，NVME 磁盘名称为 nvmexn1 (x=0~n)。（接下来我们都以 SATA 磁盘举例，请 NVME 用户注意）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cfdisk</span> /dev/sdx</code></pre></div>\n<p>使用上下方向键在需要操作的分区中移动，使用左右方向键在不同的操作中移动。我们 <code class=\"language-text\">[New]</code> 一个分区，指定大小，默认为 <code class=\"language-text\">Linux filesystem</code>，我们再选中并更改类型即可。</p>\n<p>我们需要：一个内存大小 50% ~ 100% 的 <code class=\"language-text\">Swap</code> 分区，类型为 <code class=\"language-text\">Linux swap</code>，一个自定义大小的分区（2GiB 以上），类型为 <code class=\"language-text\">Linux filesystem</code>，因为我们使用 <code class=\"language-text\">Btrfs</code> 文件系统。</p>\n<p><code class=\"language-text\">[Write]</code> 并且 <code class=\"language-text\">[Quit]</code>，这时将对磁盘进行操作，这个操作<strong>不可逆</strong>！谨慎删除分区！</p>\n<p>使用 <code class=\"language-text\">fdisk -l</code> 查看分区的情况</p>\n<p>格式化并创建子卷</p>\n<p>EFI：（双系统请跳过这步，不需要格式化）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mkfs.fat <span class=\"token parameter variable\">-F32</span> /dev/sdxn</code></pre></div>\n<p>Swap：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkswap</span> /dev/sdxn</code></pre></div>\n<p>Btrfs 分区：（archlinux为卷标，可自定义，但不可以包含特殊字符和空格）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">mkfs.btrfs <span class=\"token parameter variable\">-L</span> archlinux /dev/sdxn</code></pre></div>\n<p>挂载：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> btrfs <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">compress</span><span class=\"token operator\">=</span>zstd /dev/sdxn /mnt</code></pre></div>\n<p>使用<code class=\"language-text\">df -h</code>复查挂载情况，若不对，用<code class=\"language-text\">umount</code>卸载重来。</p>\n<p>创建子卷：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">btrfs subvolume create /mnt/@\r\nbtrfs subvolume create /mnt/@home</code></pre></div>\n<p>复查：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">btrfs subvolume list <span class=\"token parameter variable\">-p</span> /mnt</code></pre></div>\n<p>卸载：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">umount</span> /mnt</code></pre></div>\n<p>准确按照如下顺序挂载子卷！</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> btrfs <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">subvol</span><span class=\"token operator\">=</span>/@,compress<span class=\"token operator\">=</span>zstd /dev/sdxn /mnt\r\n<span class=\"token function\">mkdir</span> /mnt/home\r\n<span class=\"token function\">mount</span> <span class=\"token parameter variable\">-t</span> btrfs <span class=\"token parameter variable\">-o</span> <span class=\"token assign-left variable\">subvol</span><span class=\"token operator\">=</span>/@home,compress<span class=\"token operator\">=</span>zstd /dev/sdxn /mnt/home\r\n<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mnt/boot\r\n<span class=\"token function\">mount</span> /dev/sdxn /mnt/boot\r\n<span class=\"token function\">swapon</span> /dev/sdxn</code></pre></div>\n<p>复查：<code class=\"language-text\">df -h</code>，<code class=\"language-text\">free -h</code></p>\n<p>使用<code class=\"language-text\">pacstrap</code>安装基本包：<em>终于进入安装了 :)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pacstrap /mnt base base-devel linux linux-firmware btrfs-progs</code></pre></div>\n<p>若提示 GPG 证书错误，使用<code class=\"language-text\">pacman -S archlilnux-keyrinig</code>更新解决。</p>\n<p>安装亿些必要软件（把<code class=\"language-text\">zsh</code>换成<code class=\"language-text\">bash</code>也是可以哒~老东西用惯了）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pacstrap /mnt networkmanager <span class=\"token function\">vim</span> <span class=\"token function\">sudo</span> <span class=\"token function\">zsh</span> zsh-completions</code></pre></div>\n<p>生成 fstab file：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">genfstab <span class=\"token parameter variable\">-U</span> /mnt <span class=\"token operator\">></span> /mnt/etc/fstab\r\n<span class=\"token function\">cat</span> /mnt/etc/fstab</code></pre></div>\n<p>有正常输出即可。</p>\n<p>chroot（就快成功了！）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">arch-chroot /mnt</code></pre></div>\n<p>设置主机名，同样，不要有特殊字符和空格：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/hostname</code></pre></div>\n<p>设置 hosts：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/hosts</code></pre></div>\n<p>输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">127.0.0.1   localhost\r\n::1         localhost\r\n127.0.1.1   主机名</code></pre></div>\n<p>设置时区：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre></div>\n<p>同步时间：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">hwclock <span class=\"token parameter variable\">--systohc</span></code></pre></div>\n<p>地区化：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/locale.gen</code></pre></div>\n<p>编辑<code class=\"language-text\">/etc/locale.gen</code>，去掉<code class=\"language-text\">en_US.UTF-8 UTF-8</code>以及<code class=\"language-text\">zh_CN.UTF-8 UTF-8</code>行前的注释符号（#）：</p>\n<p>生成：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">locale-gen</code></pre></div>\n<p>输入（不要中文！会乱码）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'LANG=en_US.UTF-8'</span>  <span class=\"token operator\">></span> /etc/locale.conf</code></pre></div>\n<p>设置密码：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span> root</code></pre></div>\n<p>安装微码（根据 CPU）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pacman <span class=\"token parameter variable\">-S</span> intel-ucode <span class=\"token comment\"># Intel</span>\r\npacman <span class=\"token parameter variable\">-S</span> amd-ucode <span class=\"token comment\"># AMD</span></code></pre></div>\n<p>用<code class=\"language-text\">GRUB</code>引导：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pacman <span class=\"token parameter variable\">-S</span> grub efibootmgr os-prober</code></pre></div>\n<p>安装<code class=\"language-text\">GRUB</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">grub-install <span class=\"token parameter variable\">--target</span><span class=\"token operator\">=</span>x86_64-efi --efi-directory<span class=\"token operator\">=</span>/boot --bootloader-id<span class=\"token operator\">=</span>ARCH</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> /etc/default/grub</code></pre></div>\n<p>去掉 GRUB_CMDLINE_LINUX_DEFAULT 一行中最后的 quiet 参数，把 loglevel 的数值从 3 改成 5。这样是为了后续如果出现系统错误，方便排错，加入 nowatchdog 参数，这可以显著提高开关机速度。</p>\n<p>为引导，<code class=\"language-text\">Windows</code>添加一行：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GRUB_DISABLE_OS_PROBER=false</code></pre></div>\n<p>生成配置文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">grub-mkconfig</span> <span class=\"token parameter variable\">-o</span> /boot/grub/grub.cfg</code></pre></div>\n<p>若引导了<code class=\"language-text\">Windows</code>，会\"Found Windows Boot Manager\"，若双硬盘双系统，则先不着急，进入<code class=\"language-text\">archlinux</code>后重新执行该命令。</p>\n<p>拔掉U盘，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span>\r\n<span class=\"token function\">umount</span> <span class=\"token parameter variable\">-R</span> /mnt\r\n<span class=\"token function\">reboot</span></code></pre></div>\n<p>进入系统啦！</p>\n<p>善后：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token parameter variable\">--now</span> NetworkManager <span class=\"token comment\">#联网</span>\r\n<span class=\"token comment\">#无线：</span>\r\nnmcli dev wifi list <span class=\"token comment\"># 显示附近的 Wi-Fi 网络</span>\r\nnmcli dev wifi connect <span class=\"token string\">\"Wi-Fi名（SSID）\"</span> password <span class=\"token string\">\"网络密码\"</span> <span class=\"token comment\"># 连接指定的无线网络</span>\r\nneofetch <span class=\"token comment\">#你会爱上它的</span></code></pre></div>\n<p>大功告成。</p>","frontmatter":{"title":"archlinux 简明安装指南","date":"2023, 10, 14","description":null}},"previous":{"fields":{"slug":"/zhongguo-zai-liangzhuang/"},"frontmatter":{"title":"知识分子的回望——读《中国在梁庄》"}},"next":{"fields":{"slug":"/record/"},"frontmatter":{"title":"琐碎想法记录"}}},"pageContext":{"id":"3fd945c7-7b64-5dbd-bec1-264724f5da7f","previousPostId":"e8f79a48-62ae-5bab-8295-e466bf544732","nextPostId":"22350ce0-ddc9-52e6-a469-8ee963838c64"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}